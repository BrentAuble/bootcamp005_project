{
    "collab_server" : "",
    "contents" : "#DATA Cleaning and Transformation\ndf<-read.table(\"MLB.txt\", header = FALSE, sep = \"\\t\", quote = \"\\\"\",dec = \".\", fill = TRUE, comment.char = \"\")\nhead(df)\n#Drop the column we do not need\ndf<-subset(df, select = -V2)\n\nhead(df)\n#Add header for the df\ncolnames(df) = c('Player', 'W','L','IP','ERA','R','ER','HR',\n                 'WHIP','WPCT','GO_AO','OBP','SLG','OPS','K_9','BB_9','H_9','K_BB','P_IP')\ndf=df[df[, \"IP\"]>100, ]\ndf$WR <- (df$W-df$L)/(df$L+df$W)\n#df$KBB<- df$SO/df$BB\ndf$ERA <- as.numeric(as.character(df$ERA))\ndf$R <- as.numeric(as.character(df$R/df$IP))\ndf$ER <- as.numeric(as.character(df$ER/df$IP))\ndf$HR<-as.numeric(as.character(df$HR/df$IP))\ndf$WHIP <- as.numeric(as.character(df$WHIP))\ndf$WPCT <- as.numeric(as.character(df$WPCT))\ndf$GO_AO <- as.numeric(as.character(df$GO_AO))\ndf$OBP<-as.numeric(as.character(df$OBP))\ndf$SLG<-as.numeric(as.character(df$SLG))\ndf$K_9<-as.numeric(as.character(df$K_9))\ndf$BB_9<-as.numeric(as.character(df$BB_9))\ndf$H_9<-as.numeric(as.character(df$H_9))\ndf$K_BB<-as.numeric(as.character(df$K_BB))\ndf$P_IP<-as.numeric(as.character(df$P_IP))\n\n\n\n#df$AVG<-as.numeric(as.character(df$AVG))\n\ntail(df)\ndf<-subset(df, select = c(-W))\ndf<-subset(df, select = c(-L))\ndf<-subset(df,select=c(-Player))\ndf<-subset(df,select=c(-WPCT))\ndf<-subset(df,select=c(-IP))\n#df<-subset(df,select=c(-ER))\n#df<-subset(df,select=c(-HR))\n\n#df<-subset(df,select=c(-OBP))\n#df<-subset(df,select=c(-OPS))\nhead(df)\n#EDA\n\n\n\n\ntail(df)\n\n\n\n\n#df$BB<-df$BB/df$IP\n#df$SO<-df$SO/df$IP\n#df$HR<-df$HR/df$IP\n#summary(df)\n#write.table(df, file = \"my.df.txt\", sep = \" \", col.names = colnames(df))\n#df<-subset(df, select = c(-Player,-G,-GS,-H,-R,-ER,-W,-IP))\n\n#require(car)\n#scatterplotMatrix(~IP+ERA+WHIP+WR+GO_AO+SLG+OBP+OPS+K_9+BB_9+H_9+K_BB+P_IP,data=df,\n#                  main=\"scatterplot matrix\")\n\n#plot(df)\n#ERA,AVG,WHIP,SO seems to be correlated to WR\n#Use intutive multilinear regression to train multiregression model\n#Use Ridge approach to train the model\n#Compare the prediction power with the same data set\n\n#model.saturated = lm(WR ~ ERA + HR + KBB+AVG+WHIP, data = df)\n#summary(model.saturated)\n\n#model.reduced1 = lm(WR ~ ERA + KBB+AVG, data = df)\n#summary(model.reduced1)\n\n\n#model.reduced2 = lm(WR ~ HR + KBB+AVG, data = df)\n#summary(model.reduced2)\n\n#model.reduced3 = lm(WR ~ ERA  +AVG, data = df)\n#summary(model.reduced3)\n\n#model.reduced4 = lm(WR ~ ERA, data = df)\n#summary(model.reduced4)\n#plot(model.reduced4)\n\n\nmodel.empty = lm(WR ~ 1, data=df) \nmodel.saturated = lm(WR ~ ., data = df) #The model with ALL variables.\nscope = list(lower = formula(model.empty), upper = formula(model.saturated))\n\nlibrary(MASS) #The Modern Applied Statistics library.\n\n#Stepwise regression using AIC as the criteria (the penalty k = 2).\n\n#forwardAIC = step(model.empty, scope, direction = \"forward\", k = 2)\n#summary(forwardAIC)\n#backwardAIC = step(model.saturated, scope, direction = \"backward\", k = 2)\n#summary(backwardAIC)\n#bothAIC.empty = step(model.empty, scope, direction = \"both\", k = 2)\n#summary(bothAIC.empty)\n#bothAIC.saturated = step(model.saturated, scope, direction = \"both\", k = 2)\n#summary(bothAIC.saturated)\n\n\n\n#model.final = lm(WR ~ ERA+WHIP, data = df)\n#summary(model.final)\n#plot(model.final)\n\n#forwardAIC = step(model.empty, scope, direction = \"forward\", k = 2)\n#summary(forwardAIC)\n#backwardAIC = step(model.saturated, scope, direction = \"backward\", k = 2)\n#summary(backwardAIC)\n#bothAIC.empty = step(model.empty, scope, direction = \"both\", k = 2)\n#summary(bothAIC.empty)\n#bothAIC.saturated = step(model.saturated, scope, direction = \"both\", k = 2)\n#summary(bothAIC.saturated)\n\n\nmodel.empty = lm(WR ~ 1, data=df) \nmodel.saturated = lm(WR ~ ., data = df) #The model with ALL variables.\nscope = list(lower = formula(model.empty), upper = formula(model.saturated))\ndim(df)\n#We care about prediction\nforwardAIC = step(model.empty, scope, direction = \"forward\", k = 2)\nsummary(forwardAIC)\n#plot(forwardBIC)\n\nbackwardAIC = step(model.saturated, scope, direction = \"backward\", k = 2)\nsummary(backwardAIC)\nbothAIC.empty = step(model.empty, scope, direction = \"both\", k = 2)\nsummary(bothAIC.empty)\nbothAIC.saturated = step(model.saturated, scope, direction = \"both\", k = 2)\nsummary(bothAIC.saturated)\n\n#summary(forwardAIC)\n#plot(forwardAIC)\n#influencePlot(forwardAIC)\n#vif(forwardAIC)\n#avPlots(forwardAIC)\n#confint(forwardAIC)\n\n#backwardBIC = step(model.saturated, scope, direction = \"backward\", k = 2)\n#summary(backwardBIC)\n#bothBIC.empty = step(model.empty, scope, direction = \"both\", k = 2)\n#summary(bothBIC.empty)\n#bothBIC.saturated = step(model.saturated, scope, direction = \"both\", k = 2)\n#summary(bothBIC.saturated)\n\n\n#model.empty = lm(WR ~ 1, data=df) \n#model.saturated = lm(WR ~ ., data = df) #The model with ALL variables.\n#scope = list(lower = formula(model.empty), upper = formula(model.saturated))\n#dim(df)\n#We care about prediction\n#forwardBIC = step(model.empty, scope, direction = \"forward\", k = log(1144))\n#summary(forwardBIC)\n#plot(forwardBIC)\n\n#backwardBIC = step(model.saturated, scope, direction = \"backward\", k = log(1144))\n#summary(backwardBIC)\n#bothBIC.empty = step(model.empty, scope, direction = \"both\", k = log(1144))\n#summary(bothBIC.empty)\n#bothBIC.saturated = step(model.saturated, scope, direction = \"both\", k = log(1144))\n#summary(bothBIC.saturated)\n\ndf_pre<-read.table(\"MLB2016_pred.txt\", header = FALSE, sep = \"\\t\", quote = \"\\\"\",dec = \".\", fill = TRUE, comment.char = \"\")\n\ndf_pre<-subset(df_pre, select = -V2)\n\nhead(df_pre)\n#Add header for the df\ncolnames(df_pre) = c('Player', 'W','L','IP','ERA','R','ER','HR',\n                 'WHIP','WPCT','GO_AO','OBP','SLG','OPS','K_9','BB_9','H_9','K_BB','P_IP')\ndf_pre=df_pre[df_pre[, \"IP\"]>30, ]\ndf_pre$WR <- 0.0\n\n#df$KBB<- df$SO/df$BB\ndf_pre$ERA <- as.numeric(as.character(df_pre$ERA))\ndf_pre$R <- as.numeric(as.character(df_pre$R/df_pre$IP))\ndf_pre$ER <- as.numeric(as.character(df_pre$ER/df_pre$IP))\ndf_pre$HR<-as.numeric(as.character(df_pre$HR/df_pre$IP))\ndf_pre$WHIP <- as.numeric(as.character(df_pre$WHIP))\ndf_pre$WPCT <- as.numeric(as.character(df_pre$WPCT))\ndf_pre$GO_AO <- as.numeric(as.character(df_pre$GO_AO))\ndf_pre$OBP<-as.numeric(as.character(df_pre$OBP))\ndf_pre$SLG<-as.numeric(as.character(df_pre$SLG))\ndf_pre$K_9<-as.numeric(as.character(df_pre$K_9))\ndf_pre$BB_9<-as.numeric(as.character(df_pre$BB_9))\ndf_pre$H_9<-as.numeric(as.character(df_pre$H_9))\ndf_pre$K_BB<-as.numeric(as.character(df_pre$K_BB))\ndf_pre$P_IP<-as.numeric(as.character(df_pre$P_IP))\n\n#Vvalidation with older data out of our training set to see if the prediction is good\n\n#Predict resluts\nresult<-predict(forwardAIC, df_pre, interval = \"confidence\")\ndf_re<-data.frame(result)\ndf_re$fit=0.5*(df_re$fit+1)\ndf_re$fit\ndf_pre$WR=df_re$fit\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1463834762213.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2066274285",
    "id" : "F85A07A2",
    "lastKnownWriteTime" : 1464029639,
    "last_content_update" : 1464029639425,
    "path" : "C:/Users/Joseph/Desktop/NY/Project3_JosephWang/mlb.R",
    "project_path" : "mlb.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}